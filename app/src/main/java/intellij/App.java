/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package intellij;


import static intellij.Parameter.*;

import intellij.people.BombGuy;
import processing.core.PApplet;
import processing.core.PFont;
import processing.data.JSONArray;
import processing.data.JSONObject;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;

public class App extends PApplet {



    private final int count = 0;
    protected boolean hasGoal;

    private BombGuy bombGuy;
    private DrawGUI drawGUI;
    private JSONObject json;
    private PFont pFont;

    protected Map<Integer, char[][]> mapList;
    private int color;


    protected int lives;
    private int time;


    public App() {
    }


    public static void main(String[] args) {
        PApplet.main("intellij.App");
    }

    @Override
    public void settings() {
        size(WINDOW_WIDTH, WINDOW_HEIGHT);

    }

    @Override
    public void setup() {
        frameRate(FPS);
        color = color(255, 142, 0);

        mapList = new TreeMap<>();
        loadJson();
        loadFont();

        drawGUI = new DrawGUI(this, mapList, lives, time);

        // Load images during setup
        this.bombGuy = new BombGuy(this);
        bombGuy.setPosition(new Position(0, 2, "people"));
    }

    @Override
    public void draw() {
        fill(color);
        this.rect(-1, -1, WINDOW_WIDTH + 1, WINDOW_HEIGHT + 1);

//        this.rect(-1, -1, WINDOW_WIDTH + 1, WINDOW_HEIGHT + 1);

        this.drawGUI.draw();
        this.drawGUI.enemyMove();
//        this.bombGuy.draw();
//        System.out.println(count);
        if (keyCode==SPACE){
            this.drawGUI.drawBomb();
        }

    }
    @Override
    public void keyPressed() {
        // TODO Auto-generated method stub
        this.drawGUI.playerMove(keyCode);
        if (keyCode==SPACE){
//            bombB=true;
//            System.out.println(keyCode);
//            System.out.println("bomb");
            this.drawGUI.addBomb();
        }

    }

    public void loadFont(){
        pFont=createFont( "src/main/resources/PressStart2P-Regular.ttf",TEXT_SIZE,true);
        InputStream test=this.getClass().getResourceAsStream("src/main/resources/PressStart2P-Regular.ttf");


        textFont(pFont);
        textSize(TEXT_SIZE);
    }


    public void loadJson() {
        json = loadJSONObject("config.json");
        JSONArray levelsData = json.getJSONArray("levels");
        lives = json.getInt("lives");

        for (int i = 0; i < levelsData.size(); i++) {
            JSONObject level = levelsData.getJSONObject(i);
            String path = level.getString("path");
            time = level.getInt("time");

            try {
                Scanner scanner = new Scanner(new File(path));
                Map<Integer, char[]> tempMap = new TreeMap<>();
                char[][] char2DArray = new char[MAP_ROW][MAP_COLUMN];
                int cursorRow = 0;
                while (scanner.hasNextLine()) {
                    char2DArray[cursorRow] = scanner.nextLine().toCharArray();
                    cursorRow++;
                }

                //set initial value
                try {
                    if (checkMap(char2DArray)) {
                        mapList.put(i, char2DArray);
                    }
                } catch (IllegalMapException e) {
                    System.err.print(e);
                }

//                System.out.println(rowAndColumn[0] + " " + rowAndColumn[1]);
//                for (int findRow = 0; findRow < MAP_HEIGHT; findRow++) {
//                    for (int findColumn = 0; findColumn < MAP_WIDTH; findColumn++) {
//                        System.out.print(char2DArray[findRow][findColumn]);
//                    }
//                    System.out.println();
//                }

            } catch (FileNotFoundException e) {
                e.printStackTrace();

            }
        }
    }

//    public

    /**
     *
     * @param map
     * @return
     */
    protected int[] findPeople(char[][] map) {
        for (int findRow = 0; findRow < MAP_ROW; findRow++) {
            for (int findColumn = 0; findColumn < MAP_COLUMN; findColumn++) {
                if (map[findRow][findColumn] == 'P') {
                    return new int[]{findRow, findColumn};
                } else if (map[findRow][findColumn] == 'R') {

                }
            }
        }
        return null;
    }


    protected boolean checkMap(char[][] char2DArray) throws IllegalMapException {
        int[] rowAndColumn = findPeople(char2DArray);
        hasGoal = false;

        if (char2DArray != null && rowAndColumn != null) {

            char[][] checkPath = new char[MAP_ROW][MAP_COLUMN];
            for (int row = 0; row < char2DArray.length; row++) {
                for (int column = 0; column < char2DArray[row].length; column++) {
                    checkPath[row][column] = char2DArray[row][column];
                }
            }

            boolean checkResult = checkBounder(checkPath, rowAndColumn[0], rowAndColumn[1]);

            if (checkResult && hasGoal) {
                return true;
            } else {
                throw new IllegalMapException();
            }
        } else {
            throw new IllegalMapException();
        }
    }


    private boolean checkBounder(char[][] mapCopy, int row, int column) {
        if (row < 0 || column < 0 || row > MAP_ROW - 1 || column > MAP_COLUMN - 1) {
            return false;
        }

        if (mapCopy[row][column] == 'W' || mapCopy[row][column] == 'X') {
            return true;
        }

        if (mapCopy[row][column] == 'G') {
            hasGoal = true;
        }

        mapCopy[row][column] = 'X';

        boolean left = checkBounder(mapCopy, row - 1, column);
        boolean up = checkBounder(mapCopy, row, column + 1);
        boolean right = checkBounder(mapCopy, row + 1, column);
        boolean down = checkBounder(mapCopy, row, column - 1);

        return left && up && right && down;
    }

}

